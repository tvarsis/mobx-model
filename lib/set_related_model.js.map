{"version":3,"file":"set_related_model.js","names":["_isNumber","_interopRequireDefault","require","_isPlainObject","_find","_includes","_base_model","setRelatedModel","options","arguments","length","undefined","id","modelJson","relatedModel","model","relation","requestId","topLevelJson","existingRelatedModel","topLevelModelJson","topLevelJsonKey","find","isHasMany","propertyName","m","isHasOne","get","set","includes","push","reverseRelation","setReverseRelation","setMethodName"],"sources":["../src/set_related_model.js"],"sourcesContent":["import isNumber from 'lodash/isNumber';\r\nimport isPlainObject from 'lodash/isPlainObject';\r\nimport find from 'lodash/find';\r\nimport includes from 'lodash/includes';\r\n\r\nimport BaseModel from './base_model';\r\n\r\nexport default function setRelatedModel(options = {}) {\r\n\r\n  let {\r\n    id,\r\n    modelJson,\r\n    relatedModel, // related model instance, basically the same as existingRelatedModel\r\n    model,\r\n    relation,\r\n    requestId,\r\n    topLevelJson,\r\n  } = options;\r\n\r\n  let existingRelatedModel;\r\n  // id, json, relatedModel,   \r\n\r\n  if (!id && !modelJson && !relatedModel) return;\r\n\r\n  // if only id was passed, try to get json from top level\r\n  if (id && !modelJson) {\r\n    let topLevelModelJson = topLevelJson[relation.topLevelJsonKey];                  \r\n    if (topLevelModelJson) {\r\n      modelJson = find(topLevelModelJson, { id });\r\n    }\r\n  }\r\n\r\n  if (!id && modelJson) id = modelJson.id;\r\n  if (!id && relatedModel) id = relatedModel.id;\r\n\r\n\r\n\r\n  // try to find it in array by id if hasMany relation\r\n  if (relation.isHasMany) {\r\n    existingRelatedModel = model[relation.propertyName].find(m => m.id === id);\r\n  // or just check if property is assigned\r\n  } else if (relation.isHasOne) {\r\n    existingRelatedModel = model[relation.propertyName];\r\n    if (existingRelatedModel && existingRelatedModel.id !== id) existingRelatedModel = undefined;\r\n  }\r\n\r\n\r\n\r\n\r\n  // if no existing related model was not found \r\n  if (!existingRelatedModel) {\r\n\r\n    // if no related model was passed\r\n    if (!relatedModel) {    \r\n\r\n      // if no json passed, then just try to fetch model \r\n      // with given id from the store, if any\r\n      if (!modelJson) {\r\n\r\n        /*\r\n         * !!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n         * TODO\r\n         */\r\n\r\n        relatedModel = relation.relatedModel.get(id)\r\n\r\n      // if not only id was passed in json then do regular\r\n      // processing\r\n      } else {\r\n\r\n        // add relation to its store\r\n        relatedModel = relation.relatedModel.set({\r\n          modelJson,\r\n          requestId,\r\n          topLevelJson\r\n        })\r\n\r\n      }\r\n    }\r\n\r\n    // if we finally got related model, or it was passed\r\n    // add it to relation property\r\n    if (relatedModel) {\r\n\r\n      // push new model to array\r\n      if (relation.isHasMany && !includes(model[relation.propertyName], relatedModel)) {\r\n        model[relation.propertyName].push(relatedModel);\r\n\r\n      // or just assign it to the property\r\n      } else if (relation.isHasOne) {\r\n        model[relation.propertyName] = relatedModel;\r\n      }\r\n\r\n      // if there is reverse relation, add current model\r\n      // to the related model's reverse relation.\r\n      let reverseRelation = relation.reverseRelation;\r\n      if (reverseRelation) {\r\n        let setReverseRelation = relatedModel[reverseRelation.setMethodName]\r\n        // console.log('reverseRelation', relation, relatedModel, reverseRelation.setMethodName, model)\r\n        if (setReverseRelation) setReverseRelation({ relatedModel: model });\r\n      }\r\n\r\n    }\r\n\r\n    return relatedModel;\r\n\r\n  // if there is existing related model\r\n  } else {\r\n\r\n    // update it with json if it was passed\r\n    if (modelJson) {\r\n      existingRelatedModel.set({\r\n        requestId,\r\n        modelJson,\r\n        topLevelJson\r\n      });\r\n    }\r\n\r\n    return existingRelatedModel;\r\n\r\n  }\r\n\r\n}"],"mappings":"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","ignoreList":[]}