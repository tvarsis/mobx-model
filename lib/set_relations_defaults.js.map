{"version":3,"file":"set_relations_defaults.js","names":["_utils","require","_inflection","_isBoolean","_interopRequireDefault","_isString","setRelationsDefaults","model","constructor","getModel","Error","relations","forEach","relation","_isPrepared","Object","defineProperty","get","type","isHasMany","initialValue","isHasOne","isString","relatedModel","propertyName","lowercaseFirstLetter","modelName","name","pluralize","jsonKey","underscore","topLevelJsonKey","tableize","foreignKey","singularize","upperCaseFirstLetter","setMethodName","removeMethodName","reverseRelation","isBoolean","onDestroy"],"sources":["../src/set_relations_defaults.js"],"sourcesContent":["import { upperCaseFirstLetter, lowercaseFirstLetter } from './utils';\r\nimport {\r\n  pluralize, underscore, tableize, foreignKey,\r\n  singularize\r\n} from 'inflection';\r\nimport isBoolean from 'lodash/isBoolean';\r\nimport isString from 'lodash/isString';\r\n\r\n// mutate static relations and add defaults\r\n// to each relation\r\nexport default function setRelationsDefaults(model) {\r\n\r\n  if (!model.constructor.getModel) {\r\n    throw new Error(\"getModel static method must be defined for a \\\r\n                     base model class, that returns model class given its name\")\r\n  }\r\n\r\n  model.constructor.relations.forEach(relation => {\r\n\r\n    if (relation._isPrepared) return;\r\n\r\n    // console.log('setRelationsDefaults', model, relation)   \r\n\r\n    // shorthand method to quickly check if relation is of hasMany type\r\n    Object.defineProperty(relation, \"isHasMany\", {\r\n      get: function() {\r\n        return this.type === 'hasMany'\r\n      }\r\n    });\r\n\r\n    // shorthand method to quickly check if relation is of hasOne type\r\n    Object.defineProperty(relation, \"isHasOne\", {\r\n      get: function() {\r\n        return this.type === 'hasOne'\r\n      }\r\n    });\r\n\r\n    // set initialValue for relation property\r\n    if (relation.isHasMany) {\r\n      relation.initialValue = [];\r\n    } else if (relation.isHasOne) {\r\n      relation.initialValue = null;\r\n    }\r\n\r\n    if (isString(relation.relatedModel)) {\r\n      relation.relatedModel = model.constructor.getModel(relation.relatedModel);\r\n    }\r\n\r\n    // property name on model instance to relation(s)\r\n    if (!relation.propertyName) {\r\n      relation.propertyName = lowercaseFirstLetter(relation.relatedModel.modelName || relation.relatedModel.name);\r\n\r\n      if (relation.isHasMany) {\r\n        relation.propertyName = pluralize(relation.propertyName)\r\n      }\r\n    }\r\n\r\n    // json key for embedded json\r\n    if (!relation.jsonKey) {\r\n      relation.jsonKey = underscore(relation.propertyName);\r\n    }\r\n\r\n    // key in top level json\r\n    if (!relation.topLevelJsonKey) {\r\n      relation.topLevelJsonKey = tableize(relation.propertyName);\r\n    }\r\n\r\n    // foreign key with ids of relations\r\n    if (!relation.foreignKey) {\r\n      if (relation.isHasMany) {\r\n        relation.foreignKey = foreignKey(singularize(relation.propertyName)) + 's';\r\n      } else if (relation.isHasOne) {\r\n        relation.foreignKey = foreignKey(relation.propertyName);\r\n      }\r\n    }\r\n\r\n    let name = upperCaseFirstLetter(relation.propertyName);\r\n    if (relation.isHasMany) name = singularize(name);\r\n\r\n    // method name to add single relation, will be used as alias\r\n    if (!relation.setMethodName) {      \r\n      relation.setMethodName = `set${name}`;\r\n    }\r\n\r\n    // method name to remove single relation, will be used as alias\r\n    if (!relation.removeMethodName) {\r\n      relation.removeMethodName = `remove${name}`;\r\n    }\r\n\r\n    let reverseRelation = relation.reverseRelation;\r\n\r\n    if (reverseRelation) {      \r\n\r\n      if (isBoolean(reverseRelation)) {\r\n        reverseRelation = relation.reverseRelation = {};\r\n      }\r\n\r\n      if (!reverseRelation.onDestroy && reverseRelation.onDestroy !== false) {\r\n        reverseRelation.onDestroy = 'removeSelf'\r\n      }\r\n\r\n      if (!reverseRelation.propertyName) {\r\n        reverseRelation.propertyName = lowercaseFirstLetter(model.constructor.modelName || model.constructor.name);\r\n      }\r\n\r\n      let name = upperCaseFirstLetter(reverseRelation.propertyName);\r\n\r\n      if (!reverseRelation.setMethodName) {        \r\n        reverseRelation.setMethodName = `set${name}`;\r\n      }\r\n\r\n      if (!reverseRelation.removeMethodName) {        \r\n        reverseRelation.removeMethodName = `remove${name}`;\r\n      }\r\n\r\n      //console.log('setRelationsDefaults reverseRelation is true', relation.reverseRelation, relation)\r\n\r\n    }\r\n\r\n    relation._isPrepared = true;\r\n\r\n  });\r\n\r\n}"],"mappings":"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","ignoreList":[]}